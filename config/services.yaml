# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: parameters.yaml }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.event.authentication_success_listener:
        class: App\Event\AuthenticationSuccessListener
        arguments: ["@service_container"]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    app.event.authentication_failure_listener:
        class: App\Event\AuthenticationFailureListener
        arguments: ["@service_container","@token.manager"]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }
    token.manager:
        class: App\Util\Lexik\Token
        public: true
    Symfony\Component\Serializer\Normalizer\PropertyNormalizer:
        arguments:
            $nameConverter: '@serializer.name_converter.camel_case_to_snake_case'
        tags: [serializer.normalizer]
    exception.logger.monolog:
        class: App\Service\Log\ExceptionLogService
        arguments: [ "@logger" ]
        tags:
            - { name: monolog.logger, channel: exceptionLog }
    app.event.exception_listener:
        class: App\Event\ExceptionListener
        arguments: ["@exception.logger.monolog"]
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }